## SSL Orchestrator Service Extension - DNS-over-HTTP Guardian\n## Version: 1.0\n## Date: 2025 Jul 14\n## Author: Kevin Stewart, F5 Networks\n\nwhen RULE_INIT {\n    ## ===========================================\n    ## User-Defined Setting :: LOCAL LOGGING: Use this Boolean to send log traffic to local syslog facility (local0).\n    ##  This option is not recommended under heavy load. Consider using HSL logging to send to an external SIEM.\n    ## ===========================================\n    set static::DOH_LOG_LOCAL 0\n\n    ## ===========================================\n    ## User-Defined Setting :: HSL LOGGING: Use this string value to send log traffic to an external Syslog service via high-speed logging (HSL).\n    ##  The string must point to an existing HSL pool (ex. /Common/syslog-pool). A value of \"none\" disables HSL logging.\n    ## ===========================================\n    set static::DOH_LOG_HSL \"none\"\n\n    ## ===========================================\n    ## User-Defined Setting :: CATEGORY TYPE: Use this option to indicate the type of category to use.\n    ##  Options: \"subscription\", \"custom_only\", or \"sub_and_custom\"\n    ## ===========================================\n    set static::DOH_CATEGORY_TYPE \"subscription\"\n\n    ## ===========================================\n    ## User-Defined Setting :: BASIC BLOCKING: Use this Boolean to indicate basic blocking of all DoH requests.\n    ##  This option is mutually exclusive and takes precedence over all other blocking functions.\n    ## ===========================================\n    set static::DOH_BLOCKING_BASIC 0\n\n    ## ===========================================\n    ## User-Defined Array :: BLACKHOLE CATEGORY BLOCKING: Use this array to include any URL categories to trigger a DoH/DNS blackhole.\n    ##  A DNS blackhole sends a valid (but bad) address to the client in response. In this implementation, and IPv4 request\n    ##  gets 199.199.199.199, and an IPv6 requests gets 0:0:0:0:0:ffff:c7c7:c7c7.\n    ##  Note: if a category exists in both DOH_BLACKHOLE_BY_CATEGORY and DOH_SINKHOLE_BY_CATEGORY, the former takes precedence\n    ##\n    ##  Actions (select one of these for each anomaly condition):\n    ##      - dryrun        --> Dry Run action (just log)\n    ##      - blackhole     --> Blackhole the response\n    ## ===========================================\n    set static::DOH_BLACKHOLE_BY_CATEGORY_ACTION \"blackhole\"\n    set static::DOH_BLACKHOLE_BY_CATEGORY {\n        #/Common/Information_Technology\n    }\n\n    ## ===========================================\n    ## User-Defined Array :: SINKHOLE CATEGORY BLOCKING: Use this array to include any URL categories to trigger a DoH/DNS sinkhole.\n    ##  A DNS sinkhole sends a valid address that points to a local blocking page.\n    ##  Note: if a category exists in both DOH_BLACKHOLE_BY_CATEGORY and DOH_SINKHOLE_BY_CATEGORY, the former takes precedence\n    ##\n    ##  Actions (select one of these for each anomaly condition):\n    ##      - dryrun        --> Dry Run action (just log)\n    ##      - sinkhole      --> Sinkhole the response\n    ## ===========================================\n    set static::DOH_SINKHOLE_BY_CATEGORY_ACTION \"sinkhole\"\n    set static::DOH_SINKHOLE_BY_CATEGORY {\n        #/Common/Entertainment\n    }\n\n    ## ===========================================\n    ## User-defined Setting: SINKHOLE IP ADDRESS: This IP address points to an HTTPS VIP on this BIG-IP that will serve up a\n    ##  blocking page.\n    ## ===========================================\n    set static::DOH_SINKHOLE_IP4 \"10.1.10.180\"\n    set static::DOH_SINKHOLE_IP6 \"2002:c7c7:c7c8::\"\n\n\n    ## ===========================================\n    ## User-defined Setting: ANOMALY DETECTION: Use this Boolean to enable DNS/DoH anomaly detection, including:\n    ## Ref: Real time detection of malicious DoH traffic using statistical analysis: https://www.sciencedirect.com/science/article/pii/S1389128623003559\n    ##\n    ##  - Anomaly Conditions:\n    ##      - Unsually long domain name in query\n    ##      - Uncommon record types in query\n    ##  - Anomaly Actions (select one of these for each anomaly condition):\n    ##      - dryrun        --> Dry Run action (just log)\n    ##      - drop          --> Drop the request or response (depending on anomaly condition)\n    ##      - blackhole     --> Blackhole the response\n    ##      - sinkhole      --> Sinkhole the response\n    ## ===========================================\n    set static::DOH_ANOMALY_DETECTION_ENABLE 0\n\n    ## ===========================================\n    ## User-defined Setting: ANOMALY CONDITION: LONG DOMAIN: Enter an integer value here to indicate the maximum character length for a domain\n    ##  Default: > 52 characters\n    ##  Disable: 0\n    ## ===========================================\n    set static::DOH_ANOMALY_CONDITION_LONG_DOMAIN_ACTION \"dryrun\"\n    set static::DOH_ANOMALY_CONDITION_LONG_DOMAIN 52\n\n    ## ===========================================\n    ## User-defined Setting: ANOMALY CONDITION: UNCOMMON RECORD TYPES: Enter a list of flagged record types\n    ##  Default: {\"NULL\" \"NAPTR\"}\n    ##  Disable: {\"\"}\n    ## ===========================================\n    set static::DOH_ANOMALY_CONDITION_UNCOMMON_TYPE_ACTION \"dryrun\"\n    set static::DOH_ANOMALY_CONDITION_UNCOMMON_TYPE {\"NULL\" \"NAPTR\"}\n\n\n\n    ##############################################\n    ## INTERNAL ##################################\n    ##############################################\n\n    ## DNS CODES\n    ## Ref: https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml\n    ## Ref: https://en.wikipedia.org/wiki/List_of_DNS_record_types\n    ## array set static::dns_codes { 1 A 2 NS 5 CNAME 6 SOA 10 NULL 12 PTR 13 HINFO 15 MX 16 TXT 17 RP 18 AFSDB 28 AAAA 29 LOC 33 SRV 35 NAPTR 37 CERT 39 DNAME 43 DS 46 RRSIG 47 NSEC 48 DNSKEY 49 DHCID 50 NSEC3 51 NSEC3PARAM 52 TLSA 65 HTTPS 99 SPF 257 CAA }\n    array set static::dns_codes {1 A 2 NS 3 MD 4 MF 5 CNAME 6 SOA 7 MB 8 MG 9 MR 10 NULL 11 WKS 12 PTR 13 HINFO 14 MINFO 15 MX 16 TXT 17 RP 18 AFSDB 19 X25 20 ISDN 21 RT 22 NSAP 23 NSAPPTR 24 SIG 25 KEY 26 PX 27 GPOS 28 AAAA 29 LOC 30 NXT 31 EID 32 NIMLOC 33 SRV 34 ATMA 35 NAPTR 36 KX 37 CERT 38 A6 39 DNAME 40 SINK 41 OPT 42 APL 43 DS 44 SSHFP 45 IPSECKEY 46 RRSIG 47 NSEC 48 DNSKEY 49 DHCID 50 NSEC3 51 NSEC3PARAM 52 TLSA 53 SMIMEA 55 HIP 56 NINFO 57 RKEY 58 TALINK 59 CDS 60 CDNSKEY 61 OPENPGPKEY 62 CSYNC 63 ZONEMD 64 SVCB 65 HTTPS 99 SPF 100 UINFO 101 UID 102 GID 103 UNSPEC 104 NID 105 L32 106 L64 107 LP 108 EUI48 109 EUI64 249 TKEY 250 TSIG 251 IXFR 252 AXFR 253 MAILB 254 MAILA 256 URI 257 CAA 259 DOA 32768 TA 32769 DLV}\n}\n\n\n\n\n\n## UTILITY: DOH_LOG\n## This procedure consumes the message string, DoH question name, and HSL pool object to generates log messages.\n## Inputs:\n##  msg:    message string\n##  name:   name of the requested host (ex. www.f5labs.com)\n##  hsl:    hsl pool if configured, otherwise \"none\"\nproc DOH_LOG { msg name hsl } {\n    if { ${static::DOH_LOG_LOCAL} } { log -noname local0. \"[IP::client_addr]:[TCP::client_port]-[IP::local_addr]:[TCP::local_port] :: ${msg}: ${name}\" }\n    if { ${static::DOH_LOG_HSL} ne \"none\" } { HSL::send ${hsl} \"<34>1 [clock format [clock seconds] -gmt 1 -format {%Y-%m-%dT%H:%M:%S.000Z}] $static::tcl_platform(machine) sslo - [TMM::cmp_count] - ${msg}: ${name}\"}\n}\n\n## UTILITY: IP_TO_HEX\n## Converts the incoming IP to hex\n## Inputs:\n##  ver:    IP version (ipv4 or ipv6)\n##  ip:     IP address\nproc IP_TO_HEX { ver ip } {\n    switch -- ${ver} {\n        \"ipv4\" {\n            set iplist [split ${ip} \".\"]\n            set ipint [expr { \\\n                [expr { [lindex ${iplist} 3] }] + \\\n                [expr { [lindex ${iplist} 2] * 256 }] + \\\n                [expr { [lindex ${iplist} 1] * 65536 }] + \\\n                [expr { [lindex ${iplist} 0] * 16777216 }] \\\n            }]\n            return [format %08x ${ipint}]\n        }\n        \"ipv6\" {\n            return [format %032s [string map {\":\" \"\"} $ip]]\n        }\n    }\n}\n\n## UTILITY: SAFE_BASE64_DECODE\n## Safely decodes a base64-encoded payload and catches any errors\n## Inputs:\n##  payload:    base64-encoded payload\nproc SAFE_BASE64_DECODE { payload } {\n    if { [catch {b64decode \"${payload}[expr {[string length ${payload}] % 4 == 0 ? \"\":[string repeat \"=\" [expr {4 - [string length ${payload}] % 4}]]}]\"} decoded_value] == 0 and ${decoded_value} ne \"\" } {\n        return ${decoded_value}\n    } else {\n        return 0\n    }\n}\n\n## DECODE_DNS_REQ\n## This procedure consumes the HEX-encoded DoH question and decodes to return the question name and type (A,AAAA,TXT, etc.).\n## Inputs:\n##  data:   HEX-encoded DNS request data\nproc DECODE_DNS_REQ { data } {\n    if { [catch { \n        set name \"\" ; set pos 0 ; set num 0 ; set count 0 ; set typectr 0 ; set type \"\"\n        ## process question\n        foreach {i j} [split ${data} \"\"] {\n            scan ${i}${j} %x num\n            if { ${typectr} > 0 } {\n                append type \"${i}${j}\"\n                if { ${typectr} == 2 } { break }\n                incr typectr\n            } elseif { ${num} == 0 } {\n                ## we're done\n                set typectr 1\n                #break\n            } elseif { ${num} < 31 } {\n                set pos 1\n                set count ${num}\n                append name \".\"\n            } elseif { [expr { ${pos} <= ${count} }] } {\n                set char [binary format H* ${i}${j}]\n                append name $char\n                incr pos\n            }\n        }\n        set name [string range ${name} 1 end]\n        ## process qtype\n        if { [catch {\n            scan ${type} %xx type\n            set typestr $static::dns_codes(${type})\n        }] } {\n            set typestr \"UNK\"\n        } \n    }] } {\n        return \"error\"\n    } else {\n        return \"[string toupper ${typestr}]:${name}\"\n    }\n}\n\n## DOH_BLOCK\n## Performs blackhole or sinkhole block on request\n## Inputs:\n##  block:  type of block --> \"blackhole\" or \"sinkhole\"\n##  type:   request type --> A, AAAA, or TXT for blackhole, A or AAAA for sinkhole\n##  ver:    DoH request version --> WF-GET, WF-POST, or JSON\n##  id:     id of the request\n##  name:   name of the requested host (ex. www.f5labs.com)\n##  hsl:    hsl pool if configured, otherwise \"none\"\nproc DOH_BLOCK { block type ver id name hsl } {\n    switch -- ${block} {\n        \"blackhole\" {\n            ## Normalize type\n            if { [lsearch [list \"A\" \"AAAA\" \"TXT\"] $type] < 0 } { set type \"A\" }\n\n            switch -- ${type} {\n                \"A\" {\n                    if { ${ver} starts_with \"WF-\" } {\n                        ## build DNS A record blackhole response\n\n                        ## insert --> {id},flags(8180),questions(0001),answer-rrs(0001),authority-rrs(0000),addl-rrs(0000)\n                        set retstring \"${id}81800001000100000000\"\n\n                        ## split name into hex values\n                        foreach x [split ${name} \".\"] {\n                            append retstring [format %02x [string length ${x}]]\n                            foreach y [split ${x} \"\"] {\n                                append retstring [format %02x [scan ${y} %c]]\n                            }\n                        }\n\n                        ## insert --> 00,A(0001),IN(0001),name(c00c),type(0001),class(0001),ttl(00000012),length(0004)\n                        append retstring {0000010001c00c00010001000000120004}\n\n                        ## insert --> 199.199.199.199\n                        append retstring {c7c7c7c7}\n\n                        call DOH_LOG \"Sending DoH Blackhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content [binary format H* ${retstring}] \"Content-Type\" \"application/dns-message\" \"Access-Control-Allow-Origin\" \"*\"                \n\n                    } elseif { ${ver} eq \"JSON\" } {\n                        set template \"\\{\\\"Status\\\": 0,\\\"TC\\\": false,\\\"RD\\\": true,\\\"RA\\\": true,\\\"AD\\\": true,\\\"CD\\\": false,\\\"Question\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\": 1 \\}\\],\\\"Answer\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\":1,\\\"TTL\\\": 84078,\\\"data\\\": \\\"199.199.199.199\\\" \\}\\]\\}\"\n                        set template [string map [list \"BLACKHOLE_TEMPLATE\" ${name}] ${template}]\n                        call DOH_LOG \"Sending DoH Blackhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content ${template} \"Content-Type\" \"application/dns-json\" \"Access-Control-Allow-Origin\" \"*\"\n                    }\n                }\n                \"AAAA\" {\n                    if { ${ver} starts_with \"WF-\" } {\n                        ## build DNS A record blackhole response\n\n                        ## insert --> {id},flags(8180),questions(0001),answer-rrs(0001),authority-rrs(0000),addl-rrs(0000)\n                        set retstring \"${id}81800001000100000000\"\n\n                        ## split name into hex values\n                        foreach x [split ${name} \".\"] {\n                            append retstring [format %02x [string length ${x}]]\n                            foreach y [split ${x} \"\"] {\n                                append retstring [format %02x [scan ${y} %c]]\n                            }\n                        }\n\n                        ## insert --> 00,AAAA(001c),IN(0001),name(c00c),type(001c),class(0001),ttl(00000012),length(0010)\n                        append retstring {00001c0001c00c001c0001000000120010}\n\n                        ## insert --> 2002:c7c7:c7c7:: (199.199.199.199)\n                        append retstring {2002c7c7c7c700000000000000000000}\n\n                        call DOH_LOG \"Sending DoH Blackhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content [binary format H* ${retstring}] \"Content-Type\" \"application/dns-message\" \"Access-Control-Allow-Origin\" \"*\"\n\n                    } elseif { ${ver} eq \"JSON\" } {\n                        set template \"\\{\\\"Status\\\": 0,\\\"TC\\\": false,\\\"RD\\\": true,\\\"RA\\\": true,\\\"AD\\\": true,\\\"CD\\\": false,\\\"Question\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\": 28 \\}\\],\\\"Answer\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\":28,\\\"TTL\\\": 84078,\\\"data\\\": \\\"2002:c7c7:c7c7::\\\" \\}\\]\\}\"\n                        set template [string map [list \"BLACKHOLE_TEMPLATE\" ${name}] ${template}]\n                        call DOH_LOG \"Sending DoH Blackhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content ${template} \"Content-Type\" \"application/dns-json\" \"Access-Control-Allow-Origin\" \"*\"\n                    }\n                }\n                \"TXT\" {\n                    if { ${ver} starts_with \"WF-\" } {\n                        ## build DNS A record blackhole response\n\n                        ## insert --> {id},flags(8180),questions(0001),answer-rrs(0001),authority-rrs(0000),addl-rrs(0000)\n                        set retstring \"${id}81800001000100000000\"\n\n                        ## split name into hex values\n                        foreach x [split ${name} \".\"] {\n                            append retstring [format %02x [string length ${x}]]\n                            foreach y [split ${x} \"\"] {\n                                append retstring [format %02x [scan ${y} %c]]\n                            }\n                        }\n\n                        ## insert --> 00,TXT(0010),IN(0001),name(c00c),type(0010),class(0001),ttl(00000012),length(000c)\n                        append retstring {0000100001c00c0010000100000012000c}\n\n                        ## insert --> generic \"v=spf1 -all\"\n                        append retstring {0b763d73706631202d616c6c}\n\n                        call DOH_LOG \"Sending DoH Blackhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content [binary format H* ${retstring}] \"Content-Type\" \"application/dns-message\" \"Access-Control-Allow-Origin\" \"*\"\n\n                    } elseif { ${ver} eq \"JSON\" } {\n                        set template \"\\{\\\"Status\\\": 0,\\\"TC\\\": false,\\\"RD\\\": true,\\\"RA\\\": true,\\\"AD\\\": true,\\\"CD\\\": false,\\\"Question\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\": 16 \\}\\],\\\"Answer\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\":16,\\\"TTL\\\": 84078,\\\"data\\\": \\\"v=spf1 -all\\\" \\}\\]\\}\"\n                        set template [string map [list \"BLACKHOLE_TEMPLATE\" ${name}] ${template}]\n                        call DOH_LOG \"Sending DoH Blackhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content ${template} \"Content-Type\" \"application/dns-json\" \"Access-Control-Allow-Origin\" \"*\"\n                    }\n                }\n            }\n        }\n        \"sinkhole\" {\n            ## Normalize type\n            if { [lsearch [list \"A\" \"AAAA\"] $type] < 0 } { set type \"A\" }\n\n            switch -- ${type} {\n                \"A\" {\n                    ## Get sinkhole IP, or use default\n                    if { $static::DOH_SINKHOLE_IP4 ne \"\" } {\n                        set ipinjected $static::DOH_SINKHOLE_IP4\n                        set iphexinjected [call IP_TO_HEX \"ipv4\" $static::DOH_SINKHOLE_IP4]\n                    } else {\n                        set ipinjected \"199.199.199.199\"\n                        set iphexinjected [call IP_TO_HEX \"ipv4\" \"199.199.199.199\"]\n                    }\n\n                    if { ${ver} starts_with \"WF-\" } {\n                        ## build DNS A record sinkhole response\n\n                        ## insert --> {id},flags(8180),questions(0001),answer-rrs(0001),authority-rrs(0000),addl-rrs(0000)\n                        set retstring \"${id}81800001000100000000\"\n\n                        ## split name into hex values\n                        foreach x [split ${name} \".\"] {\n                            append retstring [format %02x [string length ${x}]]\n                            foreach y [split ${x} \"\"] {\n                                append retstring [format %02x [scan ${y} %c]]\n                            }\n                        }\n\n                        ## insert --> 00,A(0001),IN(0001),name(c00c),type(0001),class(0001),ttl(00000012),length(0010)\n                        append retstring {0000010001c00c00010001000000120004}\n\n                        ## insert --> answer (ipv4)\n                        append retstring ${iphexinjected}\n\n                        call DOH_LOG \"Sending DoH Sinkhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content [binary format H* ${retstring}] \"Content-Type\" \"application/dns-message\" \"Access-Control-Allow-Origin\" \"*\"\n\n                    } elseif { ${ver} eq \"JSON\" } {\n                        set template \"\\{\\\"Status\\\": 0,\\\"TC\\\": false,\\\"RD\\\": true,\\\"RA\\\": true,\\\"AD\\\": true,\\\"CD\\\": false,\\\"Question\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\": 1 \\}\\],\\\"Answer\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\":1,\\\"TTL\\\": 84078,\\\"data\\\": \\\"${ipinjected}\\\" \\}\\]\\}\"\n                        set template [string map [list \"BLACKHOLE_TEMPLATE\" ${name}] ${template}]\n                        call DOH_LOG \"Sending DoH Sinkhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content ${template} \"Content-Type\" \"application/dns-json\" \"Access-Control-Allow-Origin\" \"*\"\n                    }\n                }\n                \"AAAA\" {\n                    ## Get sinkhole IP, or use default\n                    if { $static::DOH_SINKHOLE_IP6 ne \"\" } {\n                        set ipinjected $static::DOH_SINKHOLE_IP6\n                        set iphexinjected [call IP_TO_HEX \"ipv6\" $static::DOH_SINKHOLE_IP6]\n                    } else {\n                        set ipinjected \"2002:c7c7:c7c7::\"\n                        set iphexinjected [call IP_TO_HEX \"ipv6\" \"2002:c7c7:c7c7::\"]\n                    }\n\n                    if { ${ver} starts_with \"WF-\" } {\n                        ## build DNS A record sinkhole response\n\n                        ## insert --> {id},flags(8180),questions(0001),answer-rrs(0001),authority-rrs(0000),addl-rrs(0000)\n                        set retstring \"${id}81800001000100000000\"\n\n                        ## split name into hex values\n                        foreach x [split ${name} \".\"] {\n                            append retstring [format %02x [string length ${x}]]\n                            foreach y [split ${x} \"\"] {\n                                append retstring [format %02x [scan ${y} %c]]\n                            }\n                        }\n\n                        ## insert --> 00,AAAA(001c),IN(0001),name(c00c),type(001c),class(0001),ttl(00000012),length(0010)\n                        append retstring {00001c0001c00c001c0001000000120010}\n\n                        ## insert --> answer (ipv6)\n                        append retstring ${iphexinjected}\n\n                        call DOH_LOG \"Sending DoH Sinkhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content [binary format H* ${retstring}] \"Content-Type\" \"application/dns-message\" \"Access-Control-Allow-Origin\" \"*\"\n\n                    } elseif { ${ver} eq \"JSON\" } {\n                        set template \"\\{\\\"Status\\\": 0,\\\"TC\\\": false,\\\"RD\\\": true,\\\"RA\\\": true,\\\"AD\\\": true,\\\"CD\\\": false,\\\"Question\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\": 28 \\}\\],\\\"Answer\\\": \\[\\{\\\"name\\\": \\\"BLACKHOLE_TEMPLATE\\\",\\\"type\\\":28,\\\"TTL\\\": 84078,\\\"data\\\": \\\"${ipinjected}\\\" \\}\\]\\}\"\n                        set template [string map [list \"BLACKHOLE_TEMPLATE\" ${name}] ${template}]\n                        call DOH_LOG \"Sending DoH Sinkhole for Request\" \"${type}:${name}\" ${hsl}\n                        HTTP::respond 200 content ${template} \"Content-Type\" \"application/dns-json\" \"Access-Control-Allow-Origin\" \"*\"\n                    }\n                }\n            }\n        }\n    }\n}\n\n## DOH_DECIDE_REQ\n## Queries against the blockhole or sinkhole categories, or performs general anomaly detection on the DoH request\nproc DOH_DECIDE_REQ { ver id name hsl } {\n\n    ## Get request name and type\n    set type [lindex [split ${name} \":\"] 0]\n    set name [lindex [split ${name} \":\"] 1]\n\n    ## Set category lookup type\n    switch $static::DOH_CATEGORY_TYPE {\n        \"subscription\" { set query_type \"request_default\" }\n        \"custom_only\" { set query_type \"custom\"}\n        \"sub_and_custom\" { set query_type \"request_default_and_custom\" }\n        default { set query_type \"custom\" }\n    }\n\n    ## Perform a single category lookup (and test for URLDB errors)\n    set cat \"\"\n    if { [catch {\n        set cat [CATEGORY::lookup \"https://${name}/\" ${query_type}]\n    } err] } {\n        call DOH_LOG \"DoH Category Lookup Error: ${err}\" \"${type}:${name}\" ${hsl}\n        return\n    }\n\n    ## DoH request log\n    call DOH_LOG \"DoH Query Detected: name=${name},type=${type},version=${ver},id=${id},cat=${cat}\" \"\" ${hsl}\n\n    ## Test for blackhole, sinkhole, or anomaly conditions (mutually exclusive)\n    ## - Blackhole currently supports A, AAAA, and TXT records\n    ## - Sinkhole supports A and AAAA records\n    ## - Anomaly detection + blocking/logging action\n    if { ([lsearch -exact $static::DOH_BLACKHOLE_BY_CATEGORY [getfield ${cat} \" \" 1]] >= 0) } {\n        switch -- ${static::DOH_BLACKHOLE_BY_CATEGORY_ACTION} {\n            \"dryrun\" {\n                call DOH_LOG \"DoH blackhole by category detected (dryrun): \" \"${type}:${name}\" ${hsl}\n            }\n            default {\n                call DOH_BLOCK \"blackhole\" ${type} ${ver} ${id} ${name} ${hsl}\n            }\n        }\n\n    } elseif { ([lsearch -exact $static::DOH_SINKHOLE_BY_CATEGORY [getfield ${cat} \" \" 1]] >= 0) } {\n        switch -- ${static::DOH_SINKHOLE_BY_CATEGORY_ACTION} {\n            \"dryrun\" {\n                call DOH_LOG \"DoH sinkhole by category detected (dryrun): \" \"${type}:${name}\" ${hsl}\n            }\n            default {\n                call DOH_BLOCK \"sinkhole\" ${type} ${ver} ${id} ${name} ${hsl}\n            }\n        }\n\n    } elseif { ${static::DOH_ANOMALY_DETECTION_ENABLE} } {\n        ## DoH Anomaly: Excessive domain name length\n        if { (${static::DOH_ANOMALY_CONDITION_LONG_DOMAIN}) and ([expr [string length ${name}] > ${static::DOH_ANOMALY_CONDITION_LONG_DOMAIN}]) } {\n            switch -- ${static::DOH_ANOMALY_CONDITION_LONG_DOMAIN_ACTION} {\n                \"dryrun\" {\n                    call DOH_LOG \"DoH anomaly detected: Long Domain Name ([string length ${name}] chars) -- dryrun\" \"${type}:${name}\" ${hsl}\n                }\n                \"drop\" {\n                    call DOH_LOG \"DoH anomaly detected: Long Domain Name ([string length ${name}] chars) -- dropping\" \"${type}:${name}\" ${hsl}\n                    reject\n                }\n                \"blackhole\" {\n                    call DOH_LOG \"DoH anomaly detected: Long Domain Name ([string length ${name}] chars) -- sending to blackhole\" \"${type}:${name}\" ${hsl}\n                    call DOH_BLOCK \"blackhole\" ${type} ${ver} ${id} ${name} ${hsl}\n                }\n                \"sinkhole\" {\n                    call DOH_LOG \"DoH anomaly detected: Long Domain Name ([string length ${name}] chars) -- sending to sinkhole\" \"${type}:${name}\" ${hsl}\n                    call DOH_BLOCK \"sinkhole\" ${type} ${ver} ${id} ${name} ${hsl}\n                }\n            }\n        }\n\n        ## DoH Anomaly: Uncommon DNS query type\n        if { (${static::DOH_ANOMALY_CONDITION_UNCOMMON_TYPE} ne \"\") and ([lsearch ${static::DOH_ANOMALY_CONDITION_UNCOMMON_TYPE} ${type}] >= 0) } {\n            switch -- ${static::DOH_ANOMALY_CONDITION_UNCOMMON_TYPE_ACTION} {\n                \"dryrun\" {\n                    call DOH_LOG \"DoH anomaly detected: Uncommon Query Type (${type}) -- dryrun\" \"${type}:${name}\" ${hsl}\n                }\n                \"drop\" {\n                    call DOH_LOG \"DoH anomaly detected: Uncommon Query Type (${type}) -- dropping\" \"${type}:${name}\" ${hsl}\n                    reject\n                }\n                \"blackhole\" {\n                    call DOH_LOG \"DoH anomaly detected: Uncommon Query Type (${type}) -- sending to blackhole\" \"${type}:${name}\" ${hsl}\n                    call DOH_BLOCK \"blackhole\" ${type} ${ver} ${id} ${name} ${hsl}\n                }\n                \"sinkhole\" {\n                    call DOH_LOG \"DoH anomaly detected: Uncommon Query Type (${type}) -- sending to sinkhole\" \"${type}:${name}\" ${hsl}\n                    call DOH_BLOCK \"sinkhole\" ${type} ${ver} ${id} ${name} ${hsl}\n                }\n            }\n        }\n    }\n}\n\n\nwhen CLIENT_ACCEPTED {\n    ## This event establishes HSL connection (as required) and sends reject if destination address is the blackhole IP.\n    if { [catch { if { ${static::DOH_LOG_HSL} ne \"none\" } { set hsl [HSL::open -proto UDP -pool ${static::DOH_LOG_HSL}] } else { set hsl \"none\" } } err] } { set hsl \"none\" }\n    if { [IP::local_addr] eq \"199.199.199.199\" } { reject }\n    if { [IP::local_addr] eq \"0:0:0:0:0:ffff:c7c7:c7c7\" } { reject }\n}\n\nwhen HTTP_REQUEST {\n    ## Test if this is DoH, and type of DoH\n\n    set is_doh_wire_post 0\n\n    ## Conditions:\n    ##  - Basic block and all DoH request types\n    ##  - DoH JSON GET\n    ##  - DoH WireFrame GET\n    ##  - DoH WireFrame POST\n    if { ($static::DOH_BLOCKING_BASIC) and \\\n        ( ( [HTTP::method] equals \"GET\" and [HTTP::header exists \"accept\"] and [HTTP::header \"accept\"] equals \"application/dns-json\" ) or \\\n        ( [HTTP::method] equals \"GET\" and [HTTP::header exists \"content-type\"] and [HTTP::header \"content-type\"] equals \"application/dns-message\" ) or \\\n        ( [HTTP::method] equals \"GET\" and [HTTP::header exists \"accept\"] and [HTTP::header \"accept\"] equals \"application/dns-message\" ) or \\\n        ( [HTTP::method] equals \"POST\" and [HTTP::header exists \"content-type\"] and [HTTP::header \"content-type\"] equals \"application/dns-message\" ) ) } {\n        ## DoH Basic blocking (all request types)\n        reject\n\n    } elseif { ( [HTTP::method] equals \"GET\" and [HTTP::header exists \"accept\"] and [HTTP::header \"accept\"] equals \"application/dns-json\" ) } {\n        ## DoH JSON GET request\n        set type [string toupper [URI::query [HTTP::uri] type]] ; if { ${type} eq \"\" } { set type \"A\" }\n        set name [URI::query [HTTP::uri] name] ; if { ${name} ne \"\" } { \n            # call DOH_LOG \"DoH (JSON GET) Request\" \"${type}:${name}\" ${hsl}\n            call DOH_DECIDE_REQ \"JSON\" \"null\" \"${type}:${name}\" ${hsl}\n        }\n\n    } elseif { ( ( [HTTP::method] equals \"GET\" and [HTTP::header exists \"content-type\"] and [HTTP::header \"content-type\"] equals \"application/dns-message\" ) \\\n        or ( [HTTP::method] equals \"GET\" and [HTTP::header exists \"accept\"] and [HTTP::header \"accept\"] equals \"application/dns-message\" ) ) } {\n        ## DoH WireFormat GET request\n        if { [set name [URI::query [HTTP::uri] dns]] >= 0 } {\n            ## Use this construct to handle potentially missing padding characters\n            binary scan [call SAFE_BASE64_DECODE ${name}] H* tmp\n            set id [string range ${tmp} 0 3]\n            set tmp [string range ${tmp} 24 end]\n            if { [set name [call DECODE_DNS_REQ ${tmp}]] ne \"error\" } {\n                # call DOH_LOG \"DoH (WireFormat GET) Request\" ${name} ${hsl}\n                call DOH_DECIDE_REQ \"WF-GET\" ${id} ${name} ${hsl}\n            }\n        }\n\n    } elseif { ( [HTTP::method] equals \"POST\" and [HTTP::header exists \"content-type\"] and [HTTP::header \"content-type\"] equals \"application/dns-message\" ) } {\n        ## DoH WireFormat POST request\n        set is_doh_wire_post 1\n        HTTP::collect 100\n    }\n}\nwhen HTTP_REQUEST_DATA {\n    if { ($is_doh_wire_post) } {\n        binary scan [HTTP::payload] H* tmp\n        set id [string range ${tmp} 0 3]\n        set tmp [string range ${tmp} 24 end]\n        if { [set name [call DECODE_DNS_REQ ${tmp}]] ne \"error\" } {\n            # call DOH_LOG \"DoH (WireFormat POST) Request\" ${name} ${hsl}\n            call DOH_DECIDE_REQ \"WF-POST\" ${id} ${name} ${hsl}\n        }\n    }\n}\n
